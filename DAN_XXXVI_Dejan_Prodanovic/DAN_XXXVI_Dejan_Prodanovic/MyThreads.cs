using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace DAN_XXXVI_Dejan_Prodanovic
{
    class MyThreads
    {
        public int[,] matrix;
        //list where we store random numbers that second thread generates
        public List<int> randomNumbers = new List<int>();
        //dimensions of matrix
        public int m, n;
        Random rnd = new Random();
        readonly object listLock = new object();
        //arr in which we store odd numbers from the matrix
        int[] arr;

        /// <summary>
        /// method that initilize matrix and will be started by first thread
        /// after initilization it signals second thread and than it waits that second thread 
        /// generate list of random numbers.
        /// than it populates matrix with random numbers that second thread generated
        /// </summary>
        /// <param name="m"></param>
        /// <param name="n"></param>
        public void InitializeMatrix(int m, int n)
        {
           
            Thread.Sleep(10);
          
            lock (listLock)
            {
                matrix = new int[m, n];
                this.m = m;
                this.n = n;
                Console.WriteLine("Thread1 initilized matrix");
                Monitor.Pulse(listLock);
                
                while (randomNumbers.Count < m * n)
                {
                    Monitor.Wait(listLock);
                }
                //we call method that populates matrix with random numbers
                PopulateMatrix();
                Console.WriteLine("Thread1 populated matrix with random numbers that Thread2 generated");
            }
           
        }
        /// <summary>
        /// method that generates random numbers that we will later use to populate matrix
        /// it will be started by second thread
        /// it waits on signal from first thread to start generating numbers
        /// when it is done it signals the first thread so he can populate matrix with random numbers
        /// </summary>
        public void GenerateRandomNumbers()
        {
            lock (listLock)
            {            
                Monitor.Wait(listLock, Timeout.Infinite);
                for (int i = 0; i < matrix.Length; i++)
                {
                    randomNumbers.Add(rnd.Next(10, 100));
                }
                Console.WriteLine("Thread2 generated 10000 random numbers");
                Monitor.Pulse(listLock);
            }
              
        }
        /// <summary>
        /// method that populats matrix with random numbers generated by second thread
        /// </summary>
        public void PopulateMatrix()
        {
            int counter = 0;
            for (int i = 0; i < m; i++)
            {
                for (int j = 0; j < n; j++)
                {
                    matrix[i, j] = randomNumbers[counter++];
                }
            }
        }
        /// <summary>
        /// method that will be started by thrid thread
        /// it  puts odd numbers from matrix in one dimensional array arr
        /// and after that it writes them to file. After that it signals forth thread that it is done so 
        /// that thread can read numbers from a file
        /// </summary>
        public void WriteOddNumbersToFile()
        {
            Thread.Sleep(10);

            int counter = 0;

            if (File.Exists("../../OddNumbers.txt"))
            {
                System.IO.File.WriteAllText(@"../../OddNumbers.txt", string.Empty);
            }
            arr = new int[m * n];
            
            for (int i = 0; i < m; i++)
            {
                for (int j = 0; j < n; j++)
                {
                    if (matrix[i, j] % 2 != 0)
                    {
                        arr[counter++] = (matrix[i, j]);
                    }
                }
            }

            StreamWriter sw = File.AppendText("../../OddNumbers.txt");

            lock (listLock)
            {
               
                for (int i = 0; i < counter; i++)
                {
                    sw.WriteLine(arr[i]);
                }
                sw.Close();
                Console.WriteLine("Thread3 wrote odd numbers to file");
                //sends signal to fourth thread
                Monitor.Pulse(listLock);
            }             
           
        }

        /// <summary>
        /// method started by fourth thread
        /// It reads odd numbers from file. It waits on signal from third thread
        /// </summary>
        public void ReadOddNumbersFromFile()
        {
            
            try
            {
                lock (listLock)
                {
                    //waits on signal to start reading numbers from file
                    Monitor.Wait(listLock, Timeout.Infinite);

                    Console.WriteLine("Thread4 reads odd numbers from file");
                    using (StreamReader sr = new StreamReader("../../OddNumbers.txt"))
                    {
                        string line;

                        while ((line = sr.ReadLine()) != null)
                        {
                            Console.WriteLine(line);
                        }
                    }
                }
                
            }
            catch (Exception e)
            {
                
                Console.WriteLine("The file could not be read:");
                Console.WriteLine(e.Message);
            }
        }
    }
}
